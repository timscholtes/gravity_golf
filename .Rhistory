test_fun_sub <- function(N,n) {
test_res <- rep(NA,N)
for(i in 1:N) {
num2 <- round(runif(1,0,1)*10^n,0)
num1 <- num2+round(runif(1,0,1)*10^n,0)
test_res[i] <- long_subtract(num1,num2) == as.integer64(num1)-as.integer64(num2)
print(paste(num1,num2,test_res[i],sep=","))
}
return(all(test_res))
}
test_fun_sub(10,18)
test_fun_sub(10,19)
karatsuba(3141592653589793238462643383279502884197169399375105820974944592,
2718281828459045235360287471352662497757247093699959574966967627)
log(3141592653589793238462643383279502884197169399375105820974944592,2)
log(2718281828459045235360287471352662497757247093699959574966967627,2)
2^210
2^211
nchar(2^211)
2*10^64
karatsuba(paste0("2",rep(0,64)),paste0("4",rep(0,64)))
karatsuba(paste0("2",rep(0,64),collapse=""),paste0("4",rep(0,64),collapse=""))
nchar("816243240485664728088970513212937455361697785940210182634425058667482909907152331394755637179879604122028364452606876849301091709009284766860524436282012039587797163554739312315069890827466585042342618100193857769615345372921130496888072645648403224160800")
karatsuba(paste0("2",rep(0,10),collapse=""),paste0("4",rep(0,10),collapse=""))
nchar(karatsuba(paste0("2",rep(0,10),collapse=""),paste0("4",rep(0,10),collapse="")))
paste0("2",rep(0,10),collapse="")
karatsuba(paste0("2",paste0(rep(0,10),collapse="")),paste0("4",paste0(rep(0,10),collapse="")))
karatsuba(paste0("2",paste0(rep(0,64),collapse="")),paste0("4",paste0(rep(0,64),collapse="")))
nchar(800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
karatsuba(paste0("2",paste0(rep(0,63),collapse="")),paste0("4",paste0(rep(0,63),collapse="")))
nchar(8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
200^2
karatsuba(paste0("2",paste0(rep(0,64),collapse="")),paste0("4",paste0(rep(0,64),collapse="")))
karatsuba(paste0("2",paste0(rep(0,120),collapse="")),paste0("4",paste0(rep(0,120),collapse="")))
nchar(8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
karatsuba(paste0("2",paste0(rep(0,119),"1",collapse="")),paste0("4",paste0(rep(0,120),collapse="")))
karatsuba(paste0("2",paste0(rep(0,2),"1",collapse="")),paste0("4",paste0(rep(0,2),collapse="")))
paste0("2",paste0(rep(0,2),"1",collapse=""))
karatsuba(paste0("2",paste0(paste0(rep(0,2),collapse=""),"1",collapse="")),paste0("4",paste0(rep(0,2),collapse="")))
karatsuba(paste0("2",paste0(paste0(rep(0,100),collapse=""),"1",collapse="")),paste0("4",paste0(rep(0,101),collapse="")))
nchar(80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
karatsuba(3141592653589793238462643383279502884197169399375105820974944592,
2718281828459045235360287471352662497757247093699959574966967627)
karatsuba(3141592653589793238462643383279502884197169399375105820974944592,
2718281828459045235360287471352662497757247093699959574966967627)
Sys.getenv()
Sys.getenv("R_LIBS_USER")
?install_bitbucket
?install.packages
?ave
shiny::runApp('shiny/Shiny Pro HomePage')
shiny::runApp('shiny/Shiny Pro HomePage')
shiny::runApp('shiny/Shiny Pro HomePage')
shiny::runApp('shiny/Shiny Pro HomePage')
```{r}
plot(cars)
plot(cars)
plot(cars)
[R Markdown]
plot(cars)
plot(cars)
library(shiny)
runApp('shiny/AWS_test')
runApp('shiny/AWS_test')
?shell
runApp('shiny/AWS_test')
1376/5
rm(list=ls())
hierarchy <- data.frame(Channel=c(A,A,B,B,C,C,D,D),
Type=letters()[1:8])
hierarchy <- data.frame(Channel=c(rep(LETTERS()[1:4],each=2)),
Type=letters()[1:8])
scenario1 <- data.frame()
hierarchy <- data.frame(Channel=c(rep(LETTERS[1:4],each=2)),
Type=letters[1:8])
hierarchy
scenario1 <- do.call(rbind,lapply(1:nrow(hierarchy), function(x) {
data.frame(Week = Sys.Date()+7*1:104,
Channel=hierarchy[i,1],
Type=hierarchy[i,2],
value=runif(n = 104,min=0,max=100000))
}))
scenario1 <- do.call(rbind,lapply(1:nrow(hierarchy), function(x) {
data.frame(Week = Sys.Date()+7*1:104,
Channel=hierarchy[x,1],
Type=hierarchy[x,2],
value=runif(n = 104,min=0,max=100000))
}))
head(scenario1)
tail(scenario1)
scenario_list <- lapply(1:5,function(y){
do.call(rbind,lapply(1:nrow(hierarchy), function(x) {
data.frame(Week = Sys.Date()+7*1:104,
Channel=hierarchy[x,1],
Type=hierarchy[x,2],
value=runif(n = 104,min=0,max=100000))
}))
})
head(scenario_list[[1]])
head(scenario_list[[2]])
head(scenario_list[[3]])
unique(scenario_list[[1]][,c("Channel","Type")])
names(scenario_list) <- paste0("scenario",1:5)
names(scenario_list) <- paste0("scenario",1:5)
notes_list <- lapply(1:5,function(x) {"notes"})
names(notes_list) <- paste0("scenario",1:5)
save(scenario_list,file="Z:/GROUP/TIM/shiny/MMM_template/Multi_model/data/scenario_list.RData")
save(scenario_list,file="Z:/GROUP/TIM/shiny/MMM_template/Multi_model/data/scenario_list.RData")
save(notes_list,file="Z:/GROUP/TIM/shiny/MMM_template/Multi_model/data/notes_list.RData")
unique(scenario_list[[1]])
rm(list=ls())
runApp('pp/gravity_golf')
runApp('pp/gravity_golf')
runApp('pp/gravity_golf')
tee_func <- function(state,parms) {
times=seq(0,100,by=1)
out <- ode(y=state,times=times,func=gravity,parms,method="rk4")
return(out)
}
runApp('pp/gravity_golf')
runApp('pp/gravity_golf')
runApp('pp/gravity_golf')
runApp('pp/gravity_golf')
runApp('pp/gravity_golf')
runApp('pp/gravity_golf')
runApp('pp/gravity_golf')
runApp('pp/gravity_golf')
values$state <- c(-5,0,0,0)
cos(90)
cos(90/pi)
cos(90*pi/180)
runApp('pp/gravity_golf')
runApp('pp/gravity_golf')
runApp('pp/gravity_golf')
draw.circle(x=1,y=2,radius=3,col=1)
plot.new()
draw.circle(x=1,y=2,radius=3,col=1)
?plot.new
runApp('pp/gravity_golf')
runApp('pp/gravity_golf')
runApp('pp/gravity_golf')
runApp('pp/gravity_golf')
?par
runApp('pp/gravity_golf')
runApp('pp/gravity_golf')
runApp('pp/gravity_golf')
runApp('pp/gravity_golf')
?actionButton
runApp('pp/gravity_golf')
runApp('pp/gravity_golf')
runApp('pp/gravity_golf')
runApp('pp/gravity_golf')
runApp('pp/gravity_golf')
runApp('pp/gravity_golf')
runApp('pp/gravity_golf')
runApp('pp/gravity_golf')
runApp('pp/gravity_golf')
runApp('pp/gravity_golf')
runApp('pp/gravity_golf')
runApp('pp/gravity_golf')
runApp('pp/gravity_golf')
runApp('pp/gravity_golf')
runApp('pp/gravity_golf')
runApp('pp/gravity_golf')
runApp('pp/gravity_golf')
runApp('pp/gravity_golf')
runApp('pp/gravity_golf')
runApp('pp/gravity_golf')
runApp('pp/gravity_golf')
runApp('pp/gravity_golf')
runApp('pp/gravity_golf')
runApp('pp/gravity_golf')
runApp('pp/gravity_golf')
runApp('pp/gravity_golf')
runApp('pp/gravity_golf')
?readJPEG
library(jpeg)
?readJPEG
setwd("pp/gravity_golf/")
image_files <- list.files("data")
image_files
images <- lapply(image_files, function(x) {
readJPEG(x)
})
image_files <- list.files("data")
images <- lapply(image_files, function(x) {
readJPEG(paste0("data/",x))
})
images
image_files <- list.files("data")
x <- image_files[1]
readJPEG(paste0("data/",x))
x <- image_files[2]
readJPEG(paste0("data/",x))
x <- image_files[3]
readJPEG(paste0("data/",x))
x <- image_files[4]
readJPEG(paste0("data/",x))
x <- image_files[5]
readJPEG(paste0("data/",x))
for(i in 1:14) {
z <- readJPEG(paste0("data/",image_files[i]))
}
for(i in 1:14) {
print(i)
z <- readJPEG(paste0("data/",image_files[i]))
}
for(i in 1:13) {
print(i)
z <- readJPEG(paste0("data/",image_files[i]))
}
for(i in 1:13) {
print(image_files[i])
z <- readJPEG(paste0("data/",image_files[i]))
}
image_files
image_files <- list.files("data")
if("Thumbs.db" %in% image_files) {
image_files <- image_files[-which(image_files=="Thumbs.db")]}
images <- lapply(image_files, function(x) {
readJPEG(paste0("data/",x))
})
runApp()
plot(x=-5,y=0,cex=3,col=2,xlim=c(-5.5,5),ylim=c(-5,5))
i <- 1
image_points(images[i],x=values$parms$x[i],y=values$parms$y[i],cex=(values$parms$m[i]*1e-2)^(1/3))
image_points(images[i],x=0,y=0,cex=1)
image_points(images[i],x=0,y=0)
images[1]
image_points(images[i],x=0,y=0,cex=1)
dim(images[1])
class(images[1])
images[1][[1]]
images[1][[2]]
class(images[1][[1]])
dim(images[1][[1]])
image_files <- list.files("data")
if("Thumbs.db" %in% image_files) {
image_files <- image_files[-which(image_files=="Thumbs.db")]}
images <- lapply(image_files, function(x) {
readJPEG(paste0("data/",x))[[1]]
})
images[[1]]
images[[2]]
image_files <- list.files("data")
if("Thumbs.db" %in% image_files) {
image_files <- image_files[-which(image_files=="Thumbs.db")]}
images <- lapply(image_files, function(x) {
out <- readJPEG(paste0("data/",x))
out[[1]]
})
images[[1]]
images
image_files <- list.files("data")
if("Thumbs.db" %in% image_files) {
image_files <- image_files[-which(image_files=="Thumbs.db")]}
images <- lapply(image_files, function(x) {
out <- readJPEG(paste0("data/",x))
out
})
images[[1]]
runApp()
lapply(images,dim)
runApp()
head(images[[1]])
images[[1]]
dim(images[[1]]0
dim(images[[1]])
?readJPEG
?head(images[[1]][,,1])
head(images[[1]][,,1])
head(images[[1]][1:50,1:50,1])
(images[[1]][1:50,1:50,1])
(images[[1]][1:50,1:50,1])
(images[[1]][1:100,1:50,1])
(images[[1]][1:100,1:100,1])
(images[[1]][1:100,1:500,1])
(images[[1]][1:100,1:200,1])
(images[[1]][1:100,1:200,2])
(images[[1]][1:100,1:200,4])
plot(images[[1]][,100,1])
plot(images[[1]][,100,2])
plot(images[[1]][,100,3])
plot(images[[1]][,10,3])
runApp()
library(abind)
install.packages("abind")
install.packages("abind")
library(abind)
runApp()
runApp()
runApp()
plot(images[[1]][,100,2])
plot(images[[1]][,100,3])
plot(images[[1]][,100,2])
plot(images[[1]][,100,1])
plot(images[[2]][,100,1])
plot(images[[2]][,100,2])
plot(images[[2]][,100,3])
plot(images[[2]][,10,3])
plot(images[[2]][,10,2])
plot(images[[2]][,10,1])
runApp()
runApp()
head(z)
head(images[[1]])
head(images[,,4])
head(images[[1]])
images[[1]]
images[[1]][,,4]
plot(images[[1]][,100,4])
plot(images[[1]][,200,4])
unique(images[[1]][,,4])
runApp()
runApp()
char_names <- gsub(".jpg","",tolower(image_files))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("rasterVis")
vectorField()
vectorField
?vectorField
require(maps)
map("world",xlim=c(110,155),ylim=c(-40,-10))
par(xpd=TRUE)
text(132,-5,"Approximate magnetic deviation - Australia",cex=1.5)
par(xpd=FALSE)
long<-rep(seq(117.5,152.5,by=5),6)
lat<-rep(c(-12.5,-17.5,-22.5,-27.5,-32.5,-37.5),each=8)
# just show the direction, don't have a magnitude difference
mag<-rep(1,48)
devdeg<-c(110,98,85,65,65,65,65,65,
115,100,90,80,72,66,63,55,
130,100,90,82,72,67,62,54,
122,111,95,86,70,67,56,48,
118,116,110,87,74,68,62,45,
128,115,107,90,78,66,53,45)
vectorField(devdeg,mag,long,lat,scale=0.7,vecspec="deg")
proj <- CRS('+proj=longlat +datum=WGS84')
df <- expand.grid(x = seq(-2, 2, .01), y = seq(-2, 2, .01))
df$z <- with(df, (3*x^2 + y)*exp(-x^2-y^2))
r <- rasterFromXYZ(df, crs=proj)
rasterFromXYZ
?rasterFromXYZ
library(rasterVis)
?rasterFromXYZ
proj <- CRS('+proj=longlat +datum=WGS84')
df <- expand.grid(x = seq(-2, 2, .01), y = seq(-2, 2, .01))
df$z <- with(df, (3*x^2 + y)*exp(-x^2-y^2))
r <- rasterFromXYZ(df, crs=proj)
vectorplot(r, par.settings=RdBuTheme())
head(r)
dim(r)
x_diff=parms$x-x
y_diff=parms$y-y
parms$x
parms$y
x
y
x <- 0
y <- 0
x_diff=parms$x-x
y_diff=parms$y-y
net_accel_vectors<- 1/
(((x_diff^2+y_diff^2)^(1/2))/parms$m)
net_accel_vectors
net_accel_vectors<- -parms$m/
((x_diff^2+y_diff^2)^(1/2))
for( y in seq(-5,5,by=0.1)){
x_diff=parms$x-x
y_diff=parms$y-y
net_accel_vectors<- -parms$m/
((x_diff^2+y_diff^2)^(1/2))
}
net_accel_vectors<- -parms$m/
((x_diff^2+y_diff^2)^(1/2))
net_accel_vectors
x_diff=parms$x-x
y_diff=parms$y-y
x_diff
y_diff
net_accel_vectors<- -parms$m/
((x_diff^2+y_diff^2)^(1/2))
for( y in seq(-5,5,by=0.1)){
x_diff=parms$x-x
y_diff=parms$y-y
net_accel_vectors<- -parms$m/
((x_diff^2+y_diff^2)^(1/2))
}
net_accel_vectors<- -sum(parms$m/
((x_diff^2+y_diff^2)^(1/2)))
net_accel_vectors
pot <- expand.grid(x = seq(-5,5, .1), y = seq(-5,5, .1))
pot
class(pot)
dim(pot)
gravity_pot <- function(parms) {
pot <- expand.grid(x = seq(-5,5, .1), y = seq(-5,5, .1))
pot$z <- 0
for(i in 1:nrow(pot)) {
x_diff=parms$x-pot$x[i]
y_diff=parms$y-pot$y[i]
pot$z[i<- -sum(parms$m/
((x_diff^2+y_diff^2)^(1/2)))
}
}
gravity_pot <- function(parms) {
pot <- expand.grid(x = seq(-5,5, .1), y = seq(-5,5, .1))
pot$z <- 0
for(i in 1:nrow(pot)) {
x_diff=parms$x-pot$x[i]
y_diff=parms$y-pot$y[i]
pot$z[i<- -sum(parms$m/
((x_diff^2+y_diff^2)^(1/2)))
}
return(pot)
}
gravity_pot <- function(parms) {
pot <- expand.grid(x = seq(-5,5, .1), y = seq(-5,5, .1))
pot$z <- 0
for(i in 1:nrow(pot)) {
x_diff=parms$x-pot$x[i]
y_diff=parms$y-pot$y[i]
pot$z[i]<- -sum(parms$m/
((x_diff^2+y_diff^2)^(1/2)))
}
return(pot)
}
gravity_pot(parms)
runApp()
?vectorplot
runApp()
runApp()
runApp()
parms
X <- gravity_pot(parms)
X
z <- rasterFromXYZ(X)
pot <- rasterFromXYZ(X)
vectorplot(pot,par.settings=RdBuTheme())
pot
z
X
sum(is.na(X))
min(X$z)
max(X$z)
library(lattice)
wireframe(X)
wireframe(data=X)
wireframe(z~x*ydata=X)
wireframe(z~x*y,data=X)
wireframe(z~x*y,data=X,colorkey=TRUE)
wireframe(z~x*y,data=X,drape=TRUE)
?wireframe
wireframe(z~x*y,data=X,drape=TRUE,pretty=TRUE)
wireframe(z~x*y,data=X,drape=TRUE,pretty=TRUE,screen=list(z=30,x=-60))
wireframe(z~x*y,data=X,drape=TRUE,pretty=TRUE,screen=list(z=30,x=-60,y=0))
wireframe(z~x*y,data=X,drape=TRUE,pretty=TRUE,screen=list(z=30,x=-60,y=20))
wireframe(z~x*y,data=X,drape=TRUE,pretty=TRUE,screen=list(z=90,x=-60))
wireframe(z~x*y,data=X,drape=TRUE,pretty=TRUE,screen=list(z=-90,x=-60))
wireframe(z~x*y,data=X,drape=TRUE,pretty=TRUE,screen=list(z=30,x=90,y=0))
wireframe(z~x*y,data=X,drape=TRUE,pretty=TRUE,screen=list(z=30,x=-90,y=0))
wireframe(z~x*y,data=X,drape=TRUE,pretty=TRUE,screen=list(z=30,x=-0,y=0))
wireframe(z~x*y,data=X,drape=TRUE,pretty=TRUE,screen=list(z=30,x=--0,y=0))
wireframe(z~x*y,data=X,drape=TRUE,pretty=TRUE,screen=list(z=30,x=0,y=0))
wireframe(z~x*y,data=X,drape=TRUE,pretty=TRUE,screen=list(z=0,x=0,y=0))
wireframe(z~x*y,data=X,drape=TRUE,pretty=TRUE,screen=list(z=10,x=0,y=0))
wireframe(z~x*y,data=X,drape=TRUE,pretty=TRUE,screen=list(z=0,x=10,y=0))
wireframe(z~x*y,data=X,drape=TRUE,pretty=TRUE,screen=list(z=0,x=-10,y=0))
wireframe(z~x*y,data=X,drape=TRUE,pretty=TRUE,screen=list(z=0,x=-30,y=0))
runApp()
runApp()
runApp()
library(plotly)
library(plotly)
head(volcano)
pot <- matrix(rep(0,(3*2/0.1+1)^2))
pot
pot <- matrix(rep(0,(3*2/0.1+1)^2),nrow=(3*2/0.1+1))
dim(pot)
gravity_pot <- function(parms) {
pot <- matrix(rep(0,(3*2/0.1+1)^2),nrow=(3*2/0.1+1))
for(x in 1:nrow(pot)) {
for(y in 1:ncol(pot)) {
x_diff=parms$x-pot[x,y]
y_diff=parms$y-pot[x,y]
pot[x,y]<- max(-10,-sum(parms$m/
((x_diff^2+y_diff^2)^(1/2))))
}
}
return(pot)
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?filledContour
runApp()
runApp()
runApp()
runApp()
?filledContour
runApp()
runApp()
